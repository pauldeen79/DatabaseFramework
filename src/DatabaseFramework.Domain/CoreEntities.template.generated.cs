// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace DatabaseFramework.Domain
{
    public partial record CheckConstraint : DatabaseFramework.Domain.Abstractions.INameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public CheckConstraint(string expression, string name)
        {
            this.Expression = expression;
            this.Name = name;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.CheckConstraintBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.CheckConstraintBuilder(this);
        }
    }
    public partial record DefaultValueConstraint : DatabaseFramework.Domain.Abstractions.INameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string FieldName
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string DefaultValue
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public DefaultValueConstraint(string fieldName, string defaultValue, string name)
        {
            this.FieldName = fieldName;
            this.DefaultValue = defaultValue;
            this.Name = name;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.DefaultValueConstraintBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.DefaultValueConstraintBuilder(this);
        }
    }
    public partial record ForeignKeyConstraint : DatabaseFramework.Domain.Abstractions.INameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        [CrossCutting.Common.DataAnnotations.MinCountAttribute(1)]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.ForeignKeyConstraintField> LocalFields
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        [CrossCutting.Common.DataAnnotations.MinCountAttribute(1)]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.ForeignKeyConstraintField> ForeignFields
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string ForeignTableName
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public DatabaseFramework.Domain.Domains.CascadeAction CascadeUpdate
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public DatabaseFramework.Domain.Domains.CascadeAction CascadeDelete
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public ForeignKeyConstraint(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.ForeignKeyConstraintField> localFields, System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.ForeignKeyConstraintField> foreignFields, string foreignTableName, DatabaseFramework.Domain.Domains.CascadeAction cascadeUpdate, DatabaseFramework.Domain.Domains.CascadeAction cascadeDelete, string name)
        {
            this.LocalFields = localFields is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.ForeignKeyConstraintField>(localFields);
            this.ForeignFields = foreignFields is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.ForeignKeyConstraintField>(foreignFields);
            this.ForeignTableName = foreignTableName;
            this.CascadeUpdate = cascadeUpdate;
            this.CascadeDelete = cascadeDelete;
            this.Name = name;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder(this);
        }
    }
    public partial record ForeignKeyConstraintField : DatabaseFramework.Domain.Abstractions.INameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public ForeignKeyConstraintField(string name)
        {
            this.Name = name;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder(this);
        }
    }
    public partial record Index : DatabaseFramework.Domain.Abstractions.INameContainer, DatabaseFramework.Domain.Abstractions.IFileGroupNameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.MinCountAttribute(1)]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.IndexField> Fields
        {
            get;
        }

        public bool Unique
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string FileGroupName
        {
            get;
        }

        public Index(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.IndexField> fields, bool unique, string name, string fileGroupName)
        {
            this.Fields = fields is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.IndexField>(fields);
            this.Unique = unique;
            this.Name = name;
            this.FileGroupName = fileGroupName;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.IndexBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.IndexBuilder(this);
        }
    }
    public partial record IndexField : DatabaseFramework.Domain.Abstractions.INameContainer
    {
        public bool IsDescending
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public IndexField(bool isDescending, string name)
        {
            this.IsDescending = isDescending;
            this.Name = name;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.IndexFieldBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.IndexFieldBuilder(this);
        }
    }
    public partial record PrimaryKeyConstraint : DatabaseFramework.Domain.Abstractions.INameContainer, DatabaseFramework.Domain.Abstractions.IFileGroupNameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.MinCountAttribute(1)]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.PrimaryKeyConstraintField> Fields
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string FileGroupName
        {
            get;
        }

        public PrimaryKeyConstraint(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.PrimaryKeyConstraintField> fields, string name, string fileGroupName)
        {
            this.Fields = fields is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.PrimaryKeyConstraintField>(fields);
            this.Name = name;
            this.FileGroupName = fileGroupName;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder(this);
        }
    }
    public partial record PrimaryKeyConstraintField : DatabaseFramework.Domain.Abstractions.INameContainer
    {
        public bool IsDescending
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public PrimaryKeyConstraintField(bool isDescending, string name)
        {
            this.IsDescending = isDescending;
            this.Name = name;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.PrimaryKeyConstraintFieldBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.PrimaryKeyConstraintFieldBuilder(this);
        }
    }
    public partial record StoredProcedure : DatabaseFramework.Domain.Abstractions.IDatabaseObject, DatabaseFramework.Domain.Abstractions.ISchemaContainer, DatabaseFramework.Domain.Abstractions.INameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.SqlStatementBase> Statements
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.StoredProcedureParameter> Parameters
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [System.ComponentModel.DefaultValueAttribute(@"dbo")]
        public string Schema
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public StoredProcedure(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.SqlStatementBase> statements, System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.StoredProcedureParameter> parameters, string schema, string name)
        {
            this.Statements = statements is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.SqlStatementBase>(statements);
            this.Parameters = parameters is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.StoredProcedureParameter>(parameters);
            this.Schema = schema;
            this.Name = name;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.StoredProcedureBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.StoredProcedureBuilder(this);
        }

        IDatabaseObjectBuilder IDatabaseObject.ToBuilder()
        {
            return ToBuilder();
        }
    }
    public partial record StoredProcedureParameter : DatabaseFramework.Domain.Abstractions.INonViewField, DatabaseFramework.Domain.Abstractions.INameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DefaultValue
        {
            get;
        }

        public DatabaseFramework.Domain.Domains.SqlFieldType Type
        {
            get;
        }

        public System.Nullable<byte> NumericPrecision
        {
            get;
        }

        public System.Nullable<byte> NumericScale
        {
            get;
        }

        public System.Nullable<int> StringLength
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string StringCollation
        {
            get;
        }

        public System.Nullable<bool> IsStringMaxLength
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public StoredProcedureParameter(string defaultValue, DatabaseFramework.Domain.Domains.SqlFieldType type, System.Nullable<byte> numericPrecision, System.Nullable<byte> numericScale, System.Nullable<int> stringLength, string stringCollation, System.Nullable<bool> isStringMaxLength, string name)
        {
            this.DefaultValue = defaultValue;
            this.Type = type;
            this.NumericPrecision = numericPrecision;
            this.NumericScale = numericScale;
            this.StringLength = stringLength;
            this.StringCollation = stringCollation;
            this.IsStringMaxLength = isStringMaxLength;
            this.Name = name;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.StoredProcedureParameterBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.StoredProcedureParameterBuilder(this);
        }
    }
    public partial record Table : DatabaseFramework.Domain.Abstractions.IDatabaseObject, DatabaseFramework.Domain.Abstractions.ISchemaContainer, DatabaseFramework.Domain.Abstractions.INameContainer, DatabaseFramework.Domain.Abstractions.IFileGroupNameContainer, DatabaseFramework.Domain.Abstractions.ICheckConstraintContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.PrimaryKeyConstraint> PrimaryKeyConstraints
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.UniqueConstraint> UniqueConstraints
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.DefaultValueConstraint> DefaultValueConstraints
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.ForeignKeyConstraint> ForeignKeyConstraints
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Index> Indexes
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        [CrossCutting.Common.DataAnnotations.MinCountAttribute(1)]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.TableField> Fields
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [System.ComponentModel.DefaultValueAttribute(@"dbo")]
        public string Schema
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string FileGroupName
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.CheckConstraint> CheckConstraints
        {
            get;
        }

        public Table(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.PrimaryKeyConstraint> primaryKeyConstraints, System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.UniqueConstraint> uniqueConstraints, System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.DefaultValueConstraint> defaultValueConstraints, System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.ForeignKeyConstraint> foreignKeyConstraints, System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Index> indexes, System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.TableField> fields, string schema, string name, string fileGroupName, System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.CheckConstraint> checkConstraints)
        {
            this.PrimaryKeyConstraints = primaryKeyConstraints is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.PrimaryKeyConstraint>(primaryKeyConstraints);
            this.UniqueConstraints = uniqueConstraints is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.UniqueConstraint>(uniqueConstraints);
            this.DefaultValueConstraints = defaultValueConstraints is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.DefaultValueConstraint>(defaultValueConstraints);
            this.ForeignKeyConstraints = foreignKeyConstraints is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.ForeignKeyConstraint>(foreignKeyConstraints);
            this.Indexes = indexes is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.Index>(indexes);
            this.Fields = fields is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.TableField>(fields);
            this.Schema = schema;
            this.Name = name;
            this.FileGroupName = fileGroupName;
            this.CheckConstraints = checkConstraints is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.CheckConstraint>(checkConstraints);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.TableBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.TableBuilder(this);
        }

        IDatabaseObjectBuilder IDatabaseObject.ToBuilder()
        {
            return ToBuilder();
        }
    }
    public partial record TableField : DatabaseFramework.Domain.Abstractions.INonViewField, DatabaseFramework.Domain.Abstractions.INameContainer, DatabaseFramework.Domain.Abstractions.ICheckConstraintContainer
    {
        public bool IsIdentity
        {
            get;
        }

        public bool IsRequired
        {
            get;
        }

        public DatabaseFramework.Domain.Domains.SqlFieldType Type
        {
            get;
        }

        public System.Nullable<byte> NumericPrecision
        {
            get;
        }

        public System.Nullable<byte> NumericScale
        {
            get;
        }

        public System.Nullable<int> StringLength
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string StringCollation
        {
            get;
        }

        public System.Nullable<bool> IsStringMaxLength
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.CheckConstraint> CheckConstraints
        {
            get;
        }

        public TableField(bool isIdentity, bool isRequired, DatabaseFramework.Domain.Domains.SqlFieldType type, System.Nullable<byte> numericPrecision, System.Nullable<byte> numericScale, System.Nullable<int> stringLength, string stringCollation, System.Nullable<bool> isStringMaxLength, string name, System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.CheckConstraint> checkConstraints)
        {
            this.IsIdentity = isIdentity;
            this.IsRequired = isRequired;
            this.Type = type;
            this.NumericPrecision = numericPrecision;
            this.NumericScale = numericScale;
            this.StringLength = stringLength;
            this.StringCollation = stringCollation;
            this.IsStringMaxLength = isStringMaxLength;
            this.Name = name;
            this.CheckConstraints = checkConstraints is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.CheckConstraint>(checkConstraints);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.TableFieldBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.TableFieldBuilder(this);
        }
    }
    public partial record UniqueConstraint : DatabaseFramework.Domain.Abstractions.INameContainer, DatabaseFramework.Domain.Abstractions.IFileGroupNameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        [CrossCutting.Common.DataAnnotations.MinCountAttribute(1)]
        public System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.UniqueConstraintField> Fields
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string FileGroupName
        {
            get;
        }

        public UniqueConstraint(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.UniqueConstraintField> fields, string name, string fileGroupName)
        {
            this.Fields = fields is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DatabaseFramework.Domain.UniqueConstraintField>(fields);
            this.Name = name;
            this.FileGroupName = fileGroupName;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.UniqueConstraintBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.UniqueConstraintBuilder(this);
        }
    }
    public partial record UniqueConstraintField : DatabaseFramework.Domain.Abstractions.INameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public UniqueConstraintField(string name)
        {
            this.Name = name;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.UniqueConstraintFieldBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.UniqueConstraintFieldBuilder(this);
        }
    }
    public partial record View : DatabaseFramework.Domain.Abstractions.IDatabaseObject, DatabaseFramework.Domain.Abstractions.ISchemaContainer, DatabaseFramework.Domain.Abstractions.INameContainer
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Definition
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [System.ComponentModel.DefaultValueAttribute(@"dbo")]
        public string Schema
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public View(string definition, string schema, string name)
        {
            this.Definition = definition;
            this.Schema = schema;
            this.Name = name;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DatabaseFramework.Domain.Builders.ViewBuilder ToBuilder()
        {
            return new DatabaseFramework.Domain.Builders.ViewBuilder(this);
        }

        IDatabaseObjectBuilder IDatabaseObject.ToBuilder()
        {
            return ToBuilder();
        }
    }
}
#nullable disable
