// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.3
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace DatabaseFramework.Domain.Builders
{
    public partial class CheckConstraintBuilder : DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private string _expression;

        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public CheckConstraintBuilder(DatabaseFramework.Domain.CheckConstraint source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression;
            _name = source.Name;
        }

        public CheckConstraintBuilder()
        {
            _expression = string.Empty;
            _name = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.CheckConstraint Build()
        {
            return new DatabaseFramework.Domain.CheckConstraint(Expression, Name);
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.CheckConstraintBuilder WithExpression(string expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.CheckConstraint(CheckConstraintBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class DefaultValueConstraintBuilder : DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private string _fieldName;

        private string _defaultValue;

        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string FieldName
        {
            get
            {
                return _fieldName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_fieldName!, value!);
                _fieldName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FieldName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string DefaultValue
        {
            get
            {
                return _defaultValue;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_defaultValue!, value!);
                _defaultValue = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(DefaultValue));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public DefaultValueConstraintBuilder(DatabaseFramework.Domain.DefaultValueConstraint source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _fieldName = source.FieldName;
            _defaultValue = source.DefaultValue;
            _name = source.Name;
        }

        public DefaultValueConstraintBuilder()
        {
            _fieldName = string.Empty;
            _defaultValue = string.Empty;
            _name = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.DefaultValueConstraint Build()
        {
            return new DatabaseFramework.Domain.DefaultValueConstraint(FieldName, DefaultValue, Name);
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.DefaultValueConstraintBuilder WithFieldName(string fieldName)
        {
            if (fieldName is null) throw new System.ArgumentNullException(nameof(fieldName));
            FieldName = fieldName;
            return this;
        }

        public DatabaseFramework.Domain.Builders.DefaultValueConstraintBuilder WithDefaultValue(string defaultValue)
        {
            if (defaultValue is null) throw new System.ArgumentNullException(nameof(defaultValue));
            DefaultValue = defaultValue;
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.DefaultValueConstraint(DefaultValueConstraintBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class ForeignKeyConstraintBuilder : DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder> _localFields;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder> _foreignFields;

        private string _foreignTableName;

        private DatabaseFramework.Domain.Domains.CascadeAction _cascadeUpdate;

        private DatabaseFramework.Domain.Domains.CascadeAction _cascadeDelete;

        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        [CrossCutting.Common.DataAnnotations.MinCountAttribute(1)]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder> LocalFields
        {
            get
            {
                return _localFields;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder>>.Default.Equals(_localFields!, value!);
                _localFields = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(LocalFields));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        [CrossCutting.Common.DataAnnotations.MinCountAttribute(1)]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder> ForeignFields
        {
            get
            {
                return _foreignFields;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder>>.Default.Equals(_foreignFields!, value!);
                _foreignFields = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ForeignFields));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string ForeignTableName
        {
            get
            {
                return _foreignTableName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_foreignTableName!, value!);
                _foreignTableName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ForeignTableName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public DatabaseFramework.Domain.Domains.CascadeAction CascadeUpdate
        {
            get
            {
                return _cascadeUpdate;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<DatabaseFramework.Domain.Domains.CascadeAction>.Default.Equals(_cascadeUpdate, value);
                _cascadeUpdate = value;
                if (hasChanged) HandlePropertyChanged(nameof(CascadeUpdate));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public DatabaseFramework.Domain.Domains.CascadeAction CascadeDelete
        {
            get
            {
                return _cascadeDelete;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<DatabaseFramework.Domain.Domains.CascadeAction>.Default.Equals(_cascadeDelete, value);
                _cascadeDelete = value;
                if (hasChanged) HandlePropertyChanged(nameof(CascadeDelete));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public ForeignKeyConstraintBuilder(DatabaseFramework.Domain.ForeignKeyConstraint source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _localFields = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder>();
            _foreignFields = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder>();
            if (source.LocalFields is not null) foreach (var item in source.LocalFields.Select(x => x.ToBuilder())) _localFields.Add(item);
            if (source.ForeignFields is not null) foreach (var item in source.ForeignFields.Select(x => x.ToBuilder())) _foreignFields.Add(item);
            _foreignTableName = source.ForeignTableName;
            _cascadeUpdate = source.CascadeUpdate;
            _cascadeDelete = source.CascadeDelete;
            _name = source.Name;
        }

        public ForeignKeyConstraintBuilder()
        {
            _localFields = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder>();
            _foreignFields = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder>();
            _foreignTableName = string.Empty;
            _name = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.ForeignKeyConstraint Build()
        {
            return new DatabaseFramework.Domain.ForeignKeyConstraint(LocalFields.Select(x => x.Build()!).ToList().AsReadOnly(), ForeignFields.Select(x => x.Build()!).ToList().AsReadOnly(), ForeignTableName, CascadeUpdate, CascadeDelete, Name);
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder AddLocalFields(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder> localFields)
        {
            if (localFields is null) throw new System.ArgumentNullException(nameof(localFields));
            return AddLocalFields(localFields.ToArray());
        }

        public DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder AddLocalFields(params DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder[] localFields)
        {
            if (localFields is null) throw new System.ArgumentNullException(nameof(localFields));
            foreach (var item in localFields) LocalFields.Add(item);
            return this;
        }

        public DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder AddForeignFields(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder> foreignFields)
        {
            if (foreignFields is null) throw new System.ArgumentNullException(nameof(foreignFields));
            return AddForeignFields(foreignFields.ToArray());
        }

        public DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder AddForeignFields(params DatabaseFramework.Domain.Builders.ForeignKeyConstraintFieldBuilder[] foreignFields)
        {
            if (foreignFields is null) throw new System.ArgumentNullException(nameof(foreignFields));
            foreach (var item in foreignFields) ForeignFields.Add(item);
            return this;
        }

        public DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder WithForeignTableName(string foreignTableName)
        {
            if (foreignTableName is null) throw new System.ArgumentNullException(nameof(foreignTableName));
            ForeignTableName = foreignTableName;
            return this;
        }

        public DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder WithCascadeUpdate(DatabaseFramework.Domain.Domains.CascadeAction cascadeUpdate)
        {
            CascadeUpdate = cascadeUpdate;
            return this;
        }

        public DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder WithCascadeDelete(DatabaseFramework.Domain.Domains.CascadeAction cascadeDelete)
        {
            CascadeDelete = cascadeDelete;
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.ForeignKeyConstraint(ForeignKeyConstraintBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class ForeignKeyConstraintFieldBuilder : DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public ForeignKeyConstraintFieldBuilder(DatabaseFramework.Domain.ForeignKeyConstraintField source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _name = source.Name;
        }

        public ForeignKeyConstraintFieldBuilder()
        {
            _name = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.ForeignKeyConstraintField Build()
        {
            return new DatabaseFramework.Domain.ForeignKeyConstraintField(Name);
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public static implicit operator DatabaseFramework.Domain.ForeignKeyConstraintField(ForeignKeyConstraintFieldBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class IndexBuilder : DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, DatabaseFramework.Domain.Builders.Abstractions.IFileGroupNameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexFieldBuilder> _fields;

        private bool _unique;

        private string _name;

        private string _fileGroupName;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.MinCountAttribute(1)]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexFieldBuilder> Fields
        {
            get
            {
                return _fields;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.IndexFieldBuilder>>.Default.Equals(_fields!, value!);
                _fields = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Fields));
            }
        }

        public bool Unique
        {
            get
            {
                return _unique;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_unique, value);
                _unique = value;
                if (hasChanged) HandlePropertyChanged(nameof(Unique));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string FileGroupName
        {
            get
            {
                return _fileGroupName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_fileGroupName!, value!);
                _fileGroupName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FileGroupName));
            }
        }

        public IndexBuilder(DatabaseFramework.Domain.Index source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _fields = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexFieldBuilder>();
            if (source.Fields is not null) foreach (var item in source.Fields.Select(x => x.ToBuilder())) _fields.Add(item);
            _unique = source.Unique;
            _name = source.Name;
            _fileGroupName = source.FileGroupName;
        }

        public IndexBuilder()
        {
            _fields = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexFieldBuilder>();
            _name = string.Empty;
            _fileGroupName = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.Index Build()
        {
            return new DatabaseFramework.Domain.Index(Fields.Select(x => x.Build()!).ToList().AsReadOnly(), Unique, Name, FileGroupName);
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.IFileGroupNameContainer DatabaseFramework.Domain.Builders.Abstractions.IFileGroupNameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.IndexBuilder AddFields(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.IndexFieldBuilder> fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            return AddFields(fields.ToArray());
        }

        public DatabaseFramework.Domain.Builders.IndexBuilder AddFields(params DatabaseFramework.Domain.Builders.IndexFieldBuilder[] fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            foreach (var item in fields) Fields.Add(item);
            return this;
        }

        public DatabaseFramework.Domain.Builders.IndexBuilder WithUnique(bool unique = true)
        {
            Unique = unique;
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.Index(IndexBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class IndexFieldBuilder : DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private bool _isDescending;

        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public bool IsDescending
        {
            get
            {
                return _isDescending;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isDescending, value);
                _isDescending = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsDescending));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public IndexFieldBuilder(DatabaseFramework.Domain.IndexField source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _isDescending = source.IsDescending;
            _name = source.Name;
        }

        public IndexFieldBuilder()
        {
            _name = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.IndexField Build()
        {
            return new DatabaseFramework.Domain.IndexField(IsDescending, Name);
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.IndexFieldBuilder WithIsDescending(bool isDescending = true)
        {
            IsDescending = isDescending;
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.IndexField(IndexFieldBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class PrimaryKeyConstraintBuilder : DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, DatabaseFramework.Domain.Builders.Abstractions.IFileGroupNameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintFieldBuilder> _fields;

        private string _name;

        private string _fileGroupName;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.MinCountAttribute(1)]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintFieldBuilder> Fields
        {
            get
            {
                return _fields;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintFieldBuilder>>.Default.Equals(_fields!, value!);
                _fields = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Fields));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string FileGroupName
        {
            get
            {
                return _fileGroupName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_fileGroupName!, value!);
                _fileGroupName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FileGroupName));
            }
        }

        public PrimaryKeyConstraintBuilder(DatabaseFramework.Domain.PrimaryKeyConstraint source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _fields = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintFieldBuilder>();
            if (source.Fields is not null) foreach (var item in source.Fields.Select(x => x.ToBuilder())) _fields.Add(item);
            _name = source.Name;
            _fileGroupName = source.FileGroupName;
        }

        public PrimaryKeyConstraintBuilder()
        {
            _fields = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintFieldBuilder>();
            _name = string.Empty;
            _fileGroupName = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.PrimaryKeyConstraint Build()
        {
            return new DatabaseFramework.Domain.PrimaryKeyConstraint(Fields.Select(x => x.Build()!).ToList().AsReadOnly(), Name, FileGroupName);
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.IFileGroupNameContainer DatabaseFramework.Domain.Builders.Abstractions.IFileGroupNameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder AddFields(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintFieldBuilder> fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            return AddFields(fields.ToArray());
        }

        public DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder AddFields(params DatabaseFramework.Domain.Builders.PrimaryKeyConstraintFieldBuilder[] fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            foreach (var item in fields) Fields.Add(item);
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.PrimaryKeyConstraint(PrimaryKeyConstraintBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class PrimaryKeyConstraintFieldBuilder : DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private bool _isDescending;

        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public bool IsDescending
        {
            get
            {
                return _isDescending;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isDescending, value);
                _isDescending = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsDescending));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public PrimaryKeyConstraintFieldBuilder(DatabaseFramework.Domain.PrimaryKeyConstraintField source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _isDescending = source.IsDescending;
            _name = source.Name;
        }

        public PrimaryKeyConstraintFieldBuilder()
        {
            _name = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.PrimaryKeyConstraintField Build()
        {
            return new DatabaseFramework.Domain.PrimaryKeyConstraintField(IsDescending, Name);
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.PrimaryKeyConstraintFieldBuilder WithIsDescending(bool isDescending = true)
        {
            IsDescending = isDescending;
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.PrimaryKeyConstraintField(PrimaryKeyConstraintFieldBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class StoredProcedureBuilder : DatabaseFramework.Domain.Builders.Abstractions.IDatabaseObjectBuilder, DatabaseFramework.Domain.Builders.Abstractions.ISchemaContainerBuilder, DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder> _statements;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.StoredProcedureParameterBuilder> _parameters;

        private string _schema;

        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder> Statements
        {
            get
            {
                return _statements;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder>>.Default.Equals(_statements!, value!);
                _statements = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Statements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.StoredProcedureParameterBuilder> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.StoredProcedureParameterBuilder>>.Default.Equals(_parameters!, value!);
                _parameters = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Parameters));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [System.ComponentModel.DefaultValueAttribute(@"dbo")]
        public string Schema
        {
            get
            {
                return _schema;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_schema!, value!);
                _schema = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Schema));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public StoredProcedureBuilder(DatabaseFramework.Domain.StoredProcedure source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _statements = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder>();
            _parameters = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.StoredProcedureParameterBuilder>();
            if (source.Statements is not null) foreach (var item in source.Statements.Select(x => x.ToBuilder())) _statements.Add(item);
            if (source.Parameters is not null) foreach (var item in source.Parameters.Select(x => x.ToBuilder())) _parameters.Add(item);
            _schema = source.Schema;
            _name = source.Name;
        }

        public StoredProcedureBuilder()
        {
            _statements = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder>();
            _parameters = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.StoredProcedureParameterBuilder>();
            _schema = @"dbo"!;
            _name = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.StoredProcedure Build()
        {
            return new DatabaseFramework.Domain.StoredProcedure(Statements.Select(x => x.Build()!).ToList().AsReadOnly(), Parameters.Select(x => x.Build()!).ToList().AsReadOnly(), Schema, Name);
        }

        DatabaseFramework.Domain.Abstractions.IDatabaseObject DatabaseFramework.Domain.Builders.Abstractions.IDatabaseObjectBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.ISchemaContainer DatabaseFramework.Domain.Builders.Abstractions.ISchemaContainerBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.StoredProcedureBuilder AddStatements(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder> statements)
        {
            if (statements is null) throw new System.ArgumentNullException(nameof(statements));
            return AddStatements(statements.ToArray());
        }

        public DatabaseFramework.Domain.Builders.StoredProcedureBuilder AddStatements(params DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder[] statements)
        {
            if (statements is null) throw new System.ArgumentNullException(nameof(statements));
            foreach (var item in statements) Statements.Add(item);
            return this;
        }

        public DatabaseFramework.Domain.Builders.StoredProcedureBuilder AddParameters(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.StoredProcedureParameterBuilder> parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            return AddParameters(parameters.ToArray());
        }

        public DatabaseFramework.Domain.Builders.StoredProcedureBuilder AddParameters(params DatabaseFramework.Domain.Builders.StoredProcedureParameterBuilder[] parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            foreach (var item in parameters) Parameters.Add(item);
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.StoredProcedure(StoredProcedureBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class StoredProcedureParameterBuilder : DatabaseFramework.Domain.Builders.Abstractions.INonViewFieldBuilder, DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private string _defaultValue;

        private DatabaseFramework.Domain.Domains.SqlFieldType _type;

        private System.Nullable<byte> _numericPrecision;

        private System.Nullable<byte> _numericScale;

        private System.Nullable<int> _stringLength;

        private string _stringCollation;

        private System.Nullable<bool> _isStringMaxLength;

        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DefaultValue
        {
            get
            {
                return _defaultValue;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_defaultValue!, value!);
                _defaultValue = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(DefaultValue));
            }
        }

        public DatabaseFramework.Domain.Domains.SqlFieldType Type
        {
            get
            {
                return _type;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<DatabaseFramework.Domain.Domains.SqlFieldType>.Default.Equals(_type, value);
                _type = value;
                if (hasChanged) HandlePropertyChanged(nameof(Type));
            }
        }

        public System.Nullable<byte> NumericPrecision
        {
            get
            {
                return _numericPrecision;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Byte>>.Default.Equals(_numericPrecision, value);
                _numericPrecision = value;
                if (hasChanged) HandlePropertyChanged(nameof(NumericPrecision));
            }
        }

        public System.Nullable<byte> NumericScale
        {
            get
            {
                return _numericScale;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Byte>>.Default.Equals(_numericScale, value);
                _numericScale = value;
                if (hasChanged) HandlePropertyChanged(nameof(NumericScale));
            }
        }

        public System.Nullable<int> StringLength
        {
            get
            {
                return _stringLength;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Int32>>.Default.Equals(_stringLength, value);
                _stringLength = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringLength));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string StringCollation
        {
            get
            {
                return _stringCollation;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_stringCollation!, value!);
                _stringCollation = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(StringCollation));
            }
        }

        public System.Nullable<bool> IsStringMaxLength
        {
            get
            {
                return _isStringMaxLength;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Boolean>>.Default.Equals(_isStringMaxLength, value);
                _isStringMaxLength = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsStringMaxLength));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public StoredProcedureParameterBuilder(DatabaseFramework.Domain.StoredProcedureParameter source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _defaultValue = source.DefaultValue;
            _type = source.Type;
            _numericPrecision = source.NumericPrecision;
            _numericScale = source.NumericScale;
            _stringLength = source.StringLength;
            _stringCollation = source.StringCollation;
            _isStringMaxLength = source.IsStringMaxLength;
            _name = source.Name;
        }

        public StoredProcedureParameterBuilder()
        {
            _defaultValue = string.Empty;
            _stringCollation = string.Empty;
            _name = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.StoredProcedureParameter Build()
        {
            return new DatabaseFramework.Domain.StoredProcedureParameter(DefaultValue, Type, NumericPrecision, NumericScale, StringLength, StringCollation, IsStringMaxLength, Name);
        }

        DatabaseFramework.Domain.Abstractions.INonViewField DatabaseFramework.Domain.Builders.Abstractions.INonViewFieldBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.StoredProcedureParameterBuilder WithDefaultValue(string defaultValue)
        {
            if (defaultValue is null) throw new System.ArgumentNullException(nameof(defaultValue));
            DefaultValue = defaultValue;
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.StoredProcedureParameter(StoredProcedureParameterBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class TableBuilder : DatabaseFramework.Domain.Builders.Abstractions.IDatabaseObjectBuilder, DatabaseFramework.Domain.Builders.Abstractions.ISchemaContainerBuilder, DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, DatabaseFramework.Domain.Builders.Abstractions.IFileGroupNameContainerBuilder, DatabaseFramework.Domain.Builders.Abstractions.ICheckConstraintContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder> _primaryKeyConstraints;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.UniqueConstraintBuilder> _uniqueConstraints;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.DefaultValueConstraintBuilder> _defaultValueConstraints;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder> _foreignKeyConstraints;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexBuilder> _indexes;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.TableFieldBuilder> _fields;

        private string _schema;

        private string _name;

        private string _fileGroupName;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder> _checkConstraints;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder> PrimaryKeyConstraints
        {
            get
            {
                return _primaryKeyConstraints;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder>>.Default.Equals(_primaryKeyConstraints!, value!);
                _primaryKeyConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PrimaryKeyConstraints));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.UniqueConstraintBuilder> UniqueConstraints
        {
            get
            {
                return _uniqueConstraints;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.UniqueConstraintBuilder>>.Default.Equals(_uniqueConstraints!, value!);
                _uniqueConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(UniqueConstraints));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.DefaultValueConstraintBuilder> DefaultValueConstraints
        {
            get
            {
                return _defaultValueConstraints;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.DefaultValueConstraintBuilder>>.Default.Equals(_defaultValueConstraints!, value!);
                _defaultValueConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(DefaultValueConstraints));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder> ForeignKeyConstraints
        {
            get
            {
                return _foreignKeyConstraints;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder>>.Default.Equals(_foreignKeyConstraints!, value!);
                _foreignKeyConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ForeignKeyConstraints));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexBuilder> Indexes
        {
            get
            {
                return _indexes;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.IndexBuilder>>.Default.Equals(_indexes!, value!);
                _indexes = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Indexes));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        [CrossCutting.Common.DataAnnotations.MinCountAttribute(1)]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.TableFieldBuilder> Fields
        {
            get
            {
                return _fields;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.TableFieldBuilder>>.Default.Equals(_fields!, value!);
                _fields = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Fields));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [System.ComponentModel.DefaultValueAttribute(@"dbo")]
        public string Schema
        {
            get
            {
                return _schema;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_schema!, value!);
                _schema = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Schema));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string FileGroupName
        {
            get
            {
                return _fileGroupName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_fileGroupName!, value!);
                _fileGroupName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FileGroupName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder> CheckConstraints
        {
            get
            {
                return _checkConstraints;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder>>.Default.Equals(_checkConstraints!, value!);
                _checkConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CheckConstraints));
            }
        }

        public TableBuilder(DatabaseFramework.Domain.Table source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _primaryKeyConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder>();
            _uniqueConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.UniqueConstraintBuilder>();
            _defaultValueConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.DefaultValueConstraintBuilder>();
            _foreignKeyConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder>();
            _indexes = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexBuilder>();
            _fields = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.TableFieldBuilder>();
            _checkConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder>();
            if (source.PrimaryKeyConstraints is not null) foreach (var item in source.PrimaryKeyConstraints.Select(x => x.ToBuilder())) _primaryKeyConstraints.Add(item);
            if (source.UniqueConstraints is not null) foreach (var item in source.UniqueConstraints.Select(x => x.ToBuilder())) _uniqueConstraints.Add(item);
            if (source.DefaultValueConstraints is not null) foreach (var item in source.DefaultValueConstraints.Select(x => x.ToBuilder())) _defaultValueConstraints.Add(item);
            if (source.ForeignKeyConstraints is not null) foreach (var item in source.ForeignKeyConstraints.Select(x => x.ToBuilder())) _foreignKeyConstraints.Add(item);
            if (source.Indexes is not null) foreach (var item in source.Indexes.Select(x => x.ToBuilder())) _indexes.Add(item);
            if (source.Fields is not null) foreach (var item in source.Fields.Select(x => x.ToBuilder())) _fields.Add(item);
            _schema = source.Schema;
            _name = source.Name;
            _fileGroupName = source.FileGroupName;
            if (source.CheckConstraints is not null) foreach (var item in source.CheckConstraints.Select(x => x.ToBuilder())) _checkConstraints.Add(item);
        }

        public TableBuilder()
        {
            _primaryKeyConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder>();
            _uniqueConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.UniqueConstraintBuilder>();
            _defaultValueConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.DefaultValueConstraintBuilder>();
            _foreignKeyConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder>();
            _indexes = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexBuilder>();
            _fields = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.TableFieldBuilder>();
            _checkConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder>();
            _schema = @"dbo"!;
            _name = string.Empty;
            _fileGroupName = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.Table Build()
        {
            return new DatabaseFramework.Domain.Table(PrimaryKeyConstraints.Select(x => x.Build()!).ToList().AsReadOnly(), UniqueConstraints.Select(x => x.Build()!).ToList().AsReadOnly(), DefaultValueConstraints.Select(x => x.Build()!).ToList().AsReadOnly(), ForeignKeyConstraints.Select(x => x.Build()!).ToList().AsReadOnly(), Indexes.Select(x => x.Build()!).ToList().AsReadOnly(), Fields.Select(x => x.Build()!).ToList().AsReadOnly(), Schema, Name, FileGroupName, CheckConstraints.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        DatabaseFramework.Domain.Abstractions.IDatabaseObject DatabaseFramework.Domain.Builders.Abstractions.IDatabaseObjectBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.ISchemaContainer DatabaseFramework.Domain.Builders.Abstractions.ISchemaContainerBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.IFileGroupNameContainer DatabaseFramework.Domain.Builders.Abstractions.IFileGroupNameContainerBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.ICheckConstraintContainer DatabaseFramework.Domain.Builders.Abstractions.ICheckConstraintContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.TableBuilder AddPrimaryKeyConstraints(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder> primaryKeyConstraints)
        {
            if (primaryKeyConstraints is null) throw new System.ArgumentNullException(nameof(primaryKeyConstraints));
            return AddPrimaryKeyConstraints(primaryKeyConstraints.ToArray());
        }

        public DatabaseFramework.Domain.Builders.TableBuilder AddPrimaryKeyConstraints(params DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder[] primaryKeyConstraints)
        {
            if (primaryKeyConstraints is null) throw new System.ArgumentNullException(nameof(primaryKeyConstraints));
            foreach (var item in primaryKeyConstraints) PrimaryKeyConstraints.Add(item);
            return this;
        }

        public DatabaseFramework.Domain.Builders.TableBuilder AddUniqueConstraints(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.UniqueConstraintBuilder> uniqueConstraints)
        {
            if (uniqueConstraints is null) throw new System.ArgumentNullException(nameof(uniqueConstraints));
            return AddUniqueConstraints(uniqueConstraints.ToArray());
        }

        public DatabaseFramework.Domain.Builders.TableBuilder AddUniqueConstraints(params DatabaseFramework.Domain.Builders.UniqueConstraintBuilder[] uniqueConstraints)
        {
            if (uniqueConstraints is null) throw new System.ArgumentNullException(nameof(uniqueConstraints));
            foreach (var item in uniqueConstraints) UniqueConstraints.Add(item);
            return this;
        }

        public DatabaseFramework.Domain.Builders.TableBuilder AddDefaultValueConstraints(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.DefaultValueConstraintBuilder> defaultValueConstraints)
        {
            if (defaultValueConstraints is null) throw new System.ArgumentNullException(nameof(defaultValueConstraints));
            return AddDefaultValueConstraints(defaultValueConstraints.ToArray());
        }

        public DatabaseFramework.Domain.Builders.TableBuilder AddDefaultValueConstraints(params DatabaseFramework.Domain.Builders.DefaultValueConstraintBuilder[] defaultValueConstraints)
        {
            if (defaultValueConstraints is null) throw new System.ArgumentNullException(nameof(defaultValueConstraints));
            foreach (var item in defaultValueConstraints) DefaultValueConstraints.Add(item);
            return this;
        }

        public DatabaseFramework.Domain.Builders.TableBuilder AddForeignKeyConstraints(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder> foreignKeyConstraints)
        {
            if (foreignKeyConstraints is null) throw new System.ArgumentNullException(nameof(foreignKeyConstraints));
            return AddForeignKeyConstraints(foreignKeyConstraints.ToArray());
        }

        public DatabaseFramework.Domain.Builders.TableBuilder AddForeignKeyConstraints(params DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder[] foreignKeyConstraints)
        {
            if (foreignKeyConstraints is null) throw new System.ArgumentNullException(nameof(foreignKeyConstraints));
            foreach (var item in foreignKeyConstraints) ForeignKeyConstraints.Add(item);
            return this;
        }

        public DatabaseFramework.Domain.Builders.TableBuilder AddIndexes(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.IndexBuilder> indexes)
        {
            if (indexes is null) throw new System.ArgumentNullException(nameof(indexes));
            return AddIndexes(indexes.ToArray());
        }

        public DatabaseFramework.Domain.Builders.TableBuilder AddIndexes(params DatabaseFramework.Domain.Builders.IndexBuilder[] indexes)
        {
            if (indexes is null) throw new System.ArgumentNullException(nameof(indexes));
            foreach (var item in indexes) Indexes.Add(item);
            return this;
        }

        public DatabaseFramework.Domain.Builders.TableBuilder AddFields(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.TableFieldBuilder> fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            return AddFields(fields.ToArray());
        }

        public DatabaseFramework.Domain.Builders.TableBuilder AddFields(params DatabaseFramework.Domain.Builders.TableFieldBuilder[] fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            foreach (var item in fields) Fields.Add(item);
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.Table(TableBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class TableFieldBuilder : DatabaseFramework.Domain.Builders.Abstractions.INonViewFieldBuilder, DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, DatabaseFramework.Domain.Builders.Abstractions.ICheckConstraintContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private bool _isIdentity;

        private bool _isRequired;

        private DatabaseFramework.Domain.Domains.SqlFieldType _type;

        private System.Nullable<byte> _numericPrecision;

        private System.Nullable<byte> _numericScale;

        private System.Nullable<int> _stringLength;

        private string _stringCollation;

        private System.Nullable<bool> _isStringMaxLength;

        private string _name;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder> _checkConstraints;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public bool IsIdentity
        {
            get
            {
                return _isIdentity;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isIdentity, value);
                _isIdentity = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsIdentity));
            }
        }

        public bool IsRequired
        {
            get
            {
                return _isRequired;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isRequired, value);
                _isRequired = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsRequired));
            }
        }

        public DatabaseFramework.Domain.Domains.SqlFieldType Type
        {
            get
            {
                return _type;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<DatabaseFramework.Domain.Domains.SqlFieldType>.Default.Equals(_type, value);
                _type = value;
                if (hasChanged) HandlePropertyChanged(nameof(Type));
            }
        }

        public System.Nullable<byte> NumericPrecision
        {
            get
            {
                return _numericPrecision;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Byte>>.Default.Equals(_numericPrecision, value);
                _numericPrecision = value;
                if (hasChanged) HandlePropertyChanged(nameof(NumericPrecision));
            }
        }

        public System.Nullable<byte> NumericScale
        {
            get
            {
                return _numericScale;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Byte>>.Default.Equals(_numericScale, value);
                _numericScale = value;
                if (hasChanged) HandlePropertyChanged(nameof(NumericScale));
            }
        }

        public System.Nullable<int> StringLength
        {
            get
            {
                return _stringLength;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Int32>>.Default.Equals(_stringLength, value);
                _stringLength = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringLength));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string StringCollation
        {
            get
            {
                return _stringCollation;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_stringCollation!, value!);
                _stringCollation = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(StringCollation));
            }
        }

        public System.Nullable<bool> IsStringMaxLength
        {
            get
            {
                return _isStringMaxLength;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Boolean>>.Default.Equals(_isStringMaxLength, value);
                _isStringMaxLength = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsStringMaxLength));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder> CheckConstraints
        {
            get
            {
                return _checkConstraints;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder>>.Default.Equals(_checkConstraints!, value!);
                _checkConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CheckConstraints));
            }
        }

        public TableFieldBuilder(DatabaseFramework.Domain.TableField source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _checkConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder>();
            _isIdentity = source.IsIdentity;
            _isRequired = source.IsRequired;
            _type = source.Type;
            _numericPrecision = source.NumericPrecision;
            _numericScale = source.NumericScale;
            _stringLength = source.StringLength;
            _stringCollation = source.StringCollation;
            _isStringMaxLength = source.IsStringMaxLength;
            _name = source.Name;
            if (source.CheckConstraints is not null) foreach (var item in source.CheckConstraints.Select(x => x.ToBuilder())) _checkConstraints.Add(item);
        }

        public TableFieldBuilder()
        {
            _checkConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder>();
            _stringCollation = string.Empty;
            _name = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.TableField Build()
        {
            return new DatabaseFramework.Domain.TableField(IsIdentity, IsRequired, Type, NumericPrecision, NumericScale, StringLength, StringCollation, IsStringMaxLength, Name, CheckConstraints.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        DatabaseFramework.Domain.Abstractions.INonViewField DatabaseFramework.Domain.Builders.Abstractions.INonViewFieldBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.ICheckConstraintContainer DatabaseFramework.Domain.Builders.Abstractions.ICheckConstraintContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.TableFieldBuilder WithIsIdentity(bool isIdentity = true)
        {
            IsIdentity = isIdentity;
            return this;
        }

        public DatabaseFramework.Domain.Builders.TableFieldBuilder WithIsRequired(bool isRequired = true)
        {
            IsRequired = isRequired;
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.TableField(TableFieldBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class UniqueConstraintBuilder : DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, DatabaseFramework.Domain.Builders.Abstractions.IFileGroupNameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.UniqueConstraintFieldBuilder> _fields;

        private string _name;

        private string _fileGroupName;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        [CrossCutting.Common.DataAnnotations.MinCountAttribute(1)]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.UniqueConstraintFieldBuilder> Fields
        {
            get
            {
                return _fields;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.UniqueConstraintFieldBuilder>>.Default.Equals(_fields!, value!);
                _fields = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Fields));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string FileGroupName
        {
            get
            {
                return _fileGroupName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_fileGroupName!, value!);
                _fileGroupName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FileGroupName));
            }
        }

        public UniqueConstraintBuilder(DatabaseFramework.Domain.UniqueConstraint source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _fields = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.UniqueConstraintFieldBuilder>();
            if (source.Fields is not null) foreach (var item in source.Fields.Select(x => x.ToBuilder())) _fields.Add(item);
            _name = source.Name;
            _fileGroupName = source.FileGroupName;
        }

        public UniqueConstraintBuilder()
        {
            _fields = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.UniqueConstraintFieldBuilder>();
            _name = string.Empty;
            _fileGroupName = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.UniqueConstraint Build()
        {
            return new DatabaseFramework.Domain.UniqueConstraint(Fields.Select(x => x.Build()!).ToList().AsReadOnly(), Name, FileGroupName);
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.IFileGroupNameContainer DatabaseFramework.Domain.Builders.Abstractions.IFileGroupNameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.UniqueConstraintBuilder AddFields(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.UniqueConstraintFieldBuilder> fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            return AddFields(fields.ToArray());
        }

        public DatabaseFramework.Domain.Builders.UniqueConstraintBuilder AddFields(params DatabaseFramework.Domain.Builders.UniqueConstraintFieldBuilder[] fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            foreach (var item in fields) Fields.Add(item);
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.UniqueConstraint(UniqueConstraintBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class UniqueConstraintFieldBuilder : DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public UniqueConstraintFieldBuilder(DatabaseFramework.Domain.UniqueConstraintField source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _name = source.Name;
        }

        public UniqueConstraintFieldBuilder()
        {
            _name = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.UniqueConstraintField Build()
        {
            return new DatabaseFramework.Domain.UniqueConstraintField(Name);
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public static implicit operator DatabaseFramework.Domain.UniqueConstraintField(UniqueConstraintFieldBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class ViewBuilder : DatabaseFramework.Domain.Builders.Abstractions.IDatabaseObjectBuilder, DatabaseFramework.Domain.Builders.Abstractions.ISchemaContainerBuilder, DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        private string _definition;

        private string _schema;

        private string _name;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string Definition
        {
            get
            {
                return _definition;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_definition!, value!);
                _definition = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Definition));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [System.ComponentModel.DefaultValueAttribute(@"dbo")]
        public string Schema
        {
            get
            {
                return _schema;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_schema!, value!);
                _schema = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Schema));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public ViewBuilder(DatabaseFramework.Domain.View source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _definition = source.Definition;
            _schema = source.Schema;
            _name = source.Name;
        }

        public ViewBuilder()
        {
            _definition = string.Empty;
            _schema = @"dbo"!;
            _name = string.Empty;
            SetDefaultValues();
        }

        public DatabaseFramework.Domain.View Build()
        {
            return new DatabaseFramework.Domain.View(Definition, Schema, Name);
        }

        DatabaseFramework.Domain.Abstractions.IDatabaseObject DatabaseFramework.Domain.Builders.Abstractions.IDatabaseObjectBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.ISchemaContainer DatabaseFramework.Domain.Builders.Abstractions.ISchemaContainerBuilder.Build()
        {
            return Build();
        }

        DatabaseFramework.Domain.Abstractions.INameContainer DatabaseFramework.Domain.Builders.Abstractions.INameContainerBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public DatabaseFramework.Domain.Builders.ViewBuilder WithDefinition(string definition)
        {
            if (definition is null) throw new System.ArgumentNullException(nameof(definition));
            Definition = definition;
            return this;
        }

        public static implicit operator DatabaseFramework.Domain.View(ViewBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
